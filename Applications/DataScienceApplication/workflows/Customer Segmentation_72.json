{"name":"Customer Segmentation","uuid":"1f62df19-2a16-4727-bb95-7b566dd1e2bd","category":"Prediction - Clustering","description":"Customer Segmentaion - RFM","parameters":"-","nodes":[{"id":"7","name":"FieldSplitter","description":"This node splits the string of the specified input column using the specified delimiter","details":"","examples":"","type":"transform","nodeClass":"fire.nodes.etl.NodeFieldSplitter","x":"273.453px","y":"219.094px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"inputCol","value":"date","widget":"variable","title":"Input Column","description":"input column name","datatypes":["string"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputCols","value":"dt,time","widget":"textarea_medium","title":"Output Columns","description":"new column names separed by comma\u0027,\u0027.(eg: col1,co2,col3)","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"sep","value":" ","widget":"textfield","title":"Separator","description":"separator to split the input column value(default: space)","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"onError","value":"die","widget":"array","title":"On Error","description":"","optionsArray":["die","ignore"],"required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"8","name":"ColumnFilter","description":"This node creates a new DataFrame that contains only the selected columns","details":"","examples":"","type":"transform","nodeClass":"fire.nodes.etl.NodeColumnFilter","x":"449.703px","y":"222.312px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputCols","value":"[\"id\",\"customer_id\",\"product_id\",\"amount\",\"dt\"]","widget":"variables","title":"Columns","description":"Columns to be included in the output DataFrame","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"11","name":"SQL","description":"This node runs the given SQL on the incoming DataFrame","details":"","examples":"","type":"transform","nodeClass":"fire.nodes.etl.NodeSQL","x":"265.938px","y":"396.594px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"tempTable","value":"fire_temp_table","widget":"textfield","title":"Temp Table","description":"Temp Table Name to be used","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"sql","value":"select customer_id, rValue, fValue , mValue,\ncase when rValue \u003c\u003d 35   then 3.0 \n         when rValue  \u003e 35 and rValue \u003c\u003d 112 then 2.0\n         else 1.0\n         end as rScore,\ncase when fValue \u003e\u003d 15 then 3.0\n         when fValue \u003e\u003d 4 and fValue \u003c 15 then 2.0\n         else 1.0\n         end as fScore,\ncase when mValue \u003e\u003d 50000.0 then 3.0\n         when mValue \u003e\u003d 25000.0 and mValue \u003c 50000.0 then 2.0\n         else 1.0\n         end as mScore,\nmValue / fValue  as avg_amount from fire_temp_table","widget":"textarea_large","type":"sql","title":"SQL","description":"SQL to be run","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"schema","value":"","widget":"tab","title":"Schema","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColNames","value":"[\"customer_id\",\"rValue\",\"fValue\",\"mValue\",\"rScore\",\"fScore\",\"mScore\",\"avg_amount\"]","widget":"schema_col_names","title":"Output Column Names","description":"Name of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColTypes","value":"[\"STRING\",\"LONG\",\"INTEGER\",\"DOUBLE\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"DOUBLE\"]","widget":"schema_col_types","title":"Output Column Types","description":"Data Type of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColFormats","value":"[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]","widget":"schema_col_formats","title":"Output Column Formats","description":"Format of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"12","name":"SQL","description":"This node runs the given SQL on the incoming DataFrame","details":"","examples":"","type":"transform","nodeClass":"fire.nodes.etl.NodeSQL","x":"83.4844px","y":"404.125px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"tempTable","value":"fire_temp_table","widget":"textfield","title":"Temp Table","description":"Temp Table Name to be used","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"sql","value":"select customer_id, cast( (rScore + fScore + mScore) as Double) as  rfmScore, avg_amount from fire_temp_table","widget":"textarea_large","type":"sql","title":"SQL","description":"SQL to be run","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"schema","value":"","widget":"tab","title":"Schema","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColNames","value":"[\"customer_id\",\"rfmScore\",\"avg_amount\"]","widget":"schema_col_names","title":"Output Column Names","description":"Name of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColTypes","value":"[\"STRING\",\"DOUBLE\",\"DOUBLE\"]","widget":"schema_col_types","title":"Output Column Types","description":"Data Type of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColFormats","value":"[\"\",\"\",\"\"]","widget":"schema_col_formats","title":"Output Column Formats","description":"Format of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"13","name":"VectorAssembler","description":"Merges multiple columns into a vector column","details":"","examples":"","type":"ml-transformer","nodeClass":"fire.nodes.ml.NodeVectorAssembler","x":"81.9531px","y":"630.578px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"inputCols","value":"[\"rfmScore\",\"avg_amount\"]","widget":"variables","title":"Input Columns","description":"Input column of type - all numeric, boolean and vector","datatypes":["integer","long","double","float","vectorudt"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputCol","value":"feature","widget":"textfield","title":"Output Column","description":"Output column name","required":true,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"15","name":"KMeans","description":"K-means clustering with support for k-means|| initialization proposed by Bahmani et al","details":"K-means clustering with support for k-means|| initialization proposed by Bahmani et al\u003cbr\u003e\n\u003cbr\u003e\nMore at Spark MLlib/ML docs page : \u003ca href\u003d\"http://spark.apache.org/docs/latest/mllib-clustering.html#k-means\" target\u003d\"_blank\"\u003espark.apache.org/docs/latest/mllib-clustering.html#k-means\u003c/a\u003e\u003cbr\u003e","examples":"","type":"ml-estimator","nodeClass":"fire.nodes.ml.NodeKMeans","x":"467.203px","y":"490.875px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"featuresCol","value":"feature","widget":"variable","title":"Features Column","description":"Features column of type vectorUDT for model fitting.","datatypes":["vectorudt"],"required":true,"display":true,"editable":true,"disableRefresh":false},{"name":"k","value":"5","widget":"textfield","title":"K","description":"The number of clusters to create.","datatypes":["integer"],"required":true,"display":true,"editable":true,"disableRefresh":false},{"name":"maxIter","value":"10","widget":"textfield","title":"Max Iterations","description":"The maximum number of iterations.","datatypes":["integer"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"predictionCol","widget":"textfield","title":"Prediction Column","description":"The prediction column created during model scoring.","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"seed","value":"","widget":"textfield","title":"Seed","description":"Random Seed.","datatypes":["long"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"tol","value":"1e-4","widget":"textfield","title":"Tolerence","description":"The convergence tolerance for iterative algorithms.","datatypes":["double"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"initMode","value":"k-means||","widget":"array","title":"initMode","description":"The initialization algorithm mode.","optionsArray":["k-means||","random"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"initSteps","value":"5","widget":"textfield","title":"initSteps","description":"The number of steps for the k-means|| initialization mode. It will be ignored when other initialization modes are chosen.","datatypes":["integer"],"required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"16","name":"Predict","description":"Predict node takes in a DataFrame and Model and makes predictions","details":"","examples":"","type":"ml-predict","nodeClass":"fire.nodes.ml.NodePredict","x":"468.219px","y":"637.875px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"17","name":"Split","description":"This node splits the incoming DataFrame into 2. It takes in the fraction to use in splitting the data. For example, if the fraction is .7, it would split the data into 2 DataFrames, one containing 70% of the rows and the other containing the remaining 30%.","details":"","examples":"","type":"transform","nodeClass":"fire.nodes.ml.NodeSplit","x":"269.234px","y":"637.859px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"fraction1","value":".5","widget":"textfield","title":"Fraction 1","description":"Fraction to be used for Splitting the DataFrame into two. The first DataFrame would go to the lower edge output. The other would go to the higher edge output.","required":true,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"18","name":"PrintNRows","description":"Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output","details":"","examples":"","type":"transform","nodeClass":"fire.nodes.util.NodePrintFirstNRows","x":"477.219px","y":"791px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"title","value":"Row Values","widget":"textfield","title":"Title","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"n","value":"10","widget":"textfield","title":"Num Rows to Print","description":"number of rows to be printed","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"20","name":"Scala","description":"This node runs any given Scala code. The input dataframe is passed in the variable inDF. The output dataframe is passed back by registering it as a temporary table.","details":"","examples":"","type":"scala","nodeClass":"fire.nodes.etl.NodeScala","x":"463px","y":"395.641px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"code","value":"import org.apache.spark.sql.functions.{col, current_date, to_date, datediff, lit};\n\nval preprcoess \u003d inDF.select(col(\"customer_id\"), col(\"amount\"), to_date(col(\"dt\")).as(\"t_date\"))\n      .withColumn(\"current_date\", current_date)\n      .withColumn(\"trans\", lit(1))\n      .withColumn(\"diff\", datediff(col(\"current_date\"), col(\"t_date\")))\n\nval outDF \u003d preprcoess.groupBy(col(\"customer_id\")).agg(Map(\"amount\" -\u003e \"sum\", \"trans\" -\u003e \"sum\", \"diff\" -\u003e \"min\"))\n      .select(col(\"customer_id\"), col(\"sum(amount)\").as(\"mValue\"), col(\"sum(trans)\").as(\"fValue\"), col(\"min(diff)\").as(\"rValue\"))\n      \noutDF.registerTempTable(\"outDF\")","widget":"textarea_large","type":"scala","title":"Scala","description":"Scala code to be run. Input dataframe : \"inDF\", SparkContext : \"sc\", SQLContext : \"sqlContext\",  Output/Result dataframe should be registered as a temporary table - df.registerTempTable(\"outDF\")","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"schema","value":"","widget":"tab","title":"Schema","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColNames","value":"[\"customer_id\",\"mValue\",\"fValue\",\"rValue\"]","widget":"schema_col_names","title":"Column Names for the CSV","description":"New Output Columns of the SQL","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColTypes","value":"[\"STRING\",\"DOUBLE\",\"LONG\",\"INTEGER\"]","widget":"schema_col_types","title":"Column Types for the CSV","description":"Data Type of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColFormats","value":"[\"\",\"\",\"\",\"\"]","widget":"schema_col_formats","title":"Column Formats for the CSV","description":"Format of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"21","name":"ReadCSV","description":"It reads in CSV files and creates a DataFrame from it","details":"","examples":"","type":"dataset","nodeClass":"fire.nodes.dataset.NodeDatasetCSV","x":"77.25px","y":"212px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"path","value":"data/retail_recommendations/transaction.csv","widget":"textfield","title":"Path","description":"Path of the Text file/directory","required":true,"display":true,"editable":true,"disableRefresh":false},{"name":"separator","value":",","widget":"textfield","title":"Separator","description":"CSV Separator","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"header","value":"true","widget":"array","title":"Header","description":"Does the file have a header row","optionsArray":["true","false"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"dropMalformed","value":"false","widget":"array","title":"Drop Malformed","description":"Whether to drop Malformed records or error","optionsArray":["true","false"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColNames","value":"[\"id\",\"customer_id\",\"product_id\",\"amount\",\"date\"]","widget":"schema_col_names","title":"Column Names for the CSV","description":"New Output Columns of the SQL","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColTypes","value":"[\"INTEGER\",\"STRING\",\"STRING\",\"DOUBLE\",\"STRING\"]","widget":"schema_col_types","title":"Column Types for the CSV","description":"Data Type of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"outputColFormats","value":"[\"\",\"\",\"\",\"\",\"\"]","widget":"schema_col_formats","title":"Column Formats for the CSV","description":"Format of the Output Columns","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"all"},{"id":"22","name":"StickyNote","description":"Allows capturing Notes on the Workflow","details":"","examples":"","type":"sticky","nodeClass":"fire.nodes.doc.NodeStickyNote","x":"494px","y":"0px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"bgColor","value":"#f8f9fa","widget":"textfield","title":"Bg Color","description":"Background of note","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"width","value":"421px","widget":"textfield","title":"Width","description":"Width of note","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"height","value":"201px","widget":"textfield","title":"Height","description":"Height of note","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"comment","value":"\u003ch1\u003eUse Case: Customer Segmentation using RFM(Recency, Frequency and Monetary)analysis:\u003c/h1\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003eInstead of reaching out to 100% of your audience, target only specific customer segments that can prove beneficial for your business in future. Thus, RFM segmentation will help you strengthen your relationship marketing and increase customer loyalty.\u003c/p\u003e","widget":"textarea_rich","title":"Comment","description":"Comments for the Workflow","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"23","name":"StickyNote","description":"Allows capturing Notes on the Workflow","details":"","examples":"","type":"sticky","nodeClass":"fire.nodes.doc.NodeStickyNote","x":"16px","y":"41px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"bgColor","value":"#f8f9fa","widget":"textfield","title":"Bg Color","description":"Background of note","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"width","value":"267px","widget":"textfield","title":"Width","description":"Width of note","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"height","value":"136px","widget":"textfield","title":"Height","description":"Height of note","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"comment","value":"\u003cp\u003e\u003cstrong\u003eData:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eid : Continues\u003c/p\u003e\u003cp\u003ecustomer_id : Continues\u003c/p\u003e\u003cp\u003eproduct_id: Continues\u003c/p\u003e\u003cp\u003eamount: Continues\u003c/p\u003e\u003cp\u003eDateTime: yyyy-MM-dd HH:mm:SS\u003c/p\u003e","widget":"textarea_rich","title":"Comment","description":"Comments for the Workflow","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"},{"id":"24","name":"StickyNote","description":"Allows capturing Notes on the Workflow","details":"","examples":"","type":"sticky","nodeClass":"fire.nodes.doc.NodeStickyNote","x":"617px","y":"280px","fields":[{"name":"storageLevel","value":"DEFAULT","widget":"array","title":"Output Storage Level","description":"Storage Level of the Output Datasets of this Node","optionsArray":["DEFAULT","NONE","DISK_ONLY","DISK_ONLY_2","MEMORY_ONLY","MEMORY_ONLY_2","MEMORY_ONLY_SER","MEMORY_ONLY_SER_2","MEMORY_AND_DISK","MEMORY_AND_DISK_2","MEMORY_AND_DISK_SER","MEMORY_AND_DISK_SER_2","OFF_HEAP"],"required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"bgColor","value":"#f8f9fa","widget":"textfield","title":"Bg Color","description":"Background of note","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"width","value":"391px","widget":"textfield","title":"Width","description":"Width of note","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"height","value":"351px","widget":"textfield","title":"Height","description":"Height of note","required":false,"display":true,"editable":true,"disableRefresh":false},{"name":"comment","value":"\u003ch2\u003eFeature extraction and assembler:\u003c/h2\u003e\u003cp\u003e1.\u003cstrong\u003e FieldSplitterNode\u003c/strong\u003e: Split the date field into date and time.(choose space as separator)\u003c/p\u003e\u003cp\u003e2. \u003cstrong\u003eScalaNode\u003c/strong\u003e: Now, calculate the three attributes, Recency, Frequency and Monetary value, separately. First, we use the map method to turn each record into a Key-Value tuple where Customer Id is the key and the required piece of information is the value. Then, we use the reduceByKey to compute the actual aggregate.\u003c/p\u003e\u003cp\u003e3. \u003cstrong\u003eUsing SQL Node\u003c/strong\u003e, case statement assign normalized score for each attributes.(like rScore, fScore and mScore)\u003c/p\u003e\u003cp\u003e4. \u003cstrong\u003eUsing SQL Node\u003c/strong\u003e, combine the score into rfmScore.\u003c/p\u003e\u003cp\u003e5. \u003cstrong\u003eFeatureAssembler\u003c/strong\u003e: Assemble the feature vector of avgAmount and rfmScore.\u003c/p\u003e\u003cp\u003e6. \u003cstrong\u003eModel\u003c/strong\u003e: Using KMeans algorithm with k\u003d5, cluster the dataset.\u003c/p\u003e","widget":"textarea_rich","title":"Comment","description":"Comments for the Workflow","required":false,"display":true,"editable":true,"disableRefresh":false}],"engine":"scala"}],"edges":[{"source":"7","target":"8","id":1},{"source":"11","target":"12","id":2},{"source":"12","target":"13","id":3},{"source":"15","target":"16","id":4},{"source":"13","target":"17","id":5},{"source":"17","target":"15","id":6},{"source":"17","target":"16","id":7},{"source":"16","target":"18","id":8},{"source":"8","target":"20","id":9},{"source":"20","target":"11","id":10},{"source":"21","target":"7","id":11}],"dataSetDetails":[],"engine":"scala"}